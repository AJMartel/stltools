#! /usr/bin/env python
# -*- python coding: utf-8 -*-
# Copyright © 2012,2013 R.F. Smith <rsmith@xs4all.nl>. All rights reserved.
# $Date$
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

'''Program for converting a view of an STL file into a PostScript file.'''

import sys
import os
import time
from brep import stl, xform, bbox


ver = ('stl2ps [ver. ' + '$Revision$'[11:-2] + 
       '] ('+'$Date$'[7:17]+')')


def usage():
    print ver
    print "Usage: stl2ps infile [outfile] [transform [transform ...]]"
    print "where [transform] is [x number|y number|z number]"


def getargs(args):
    """ Process the command-line arguments.

    :returns: A tuple containing the input file name, the output filename and
    the transformation matrix.
    """
    validargs = ['x', 'y', 'z', 'X', 'Y', 'Z']
    if len(args) < 1:
        usage()
        sys.exit(0)
    infile = args[0]
    if len(args) < 2 or args[1] in validargs:
        outfile = None
        del args[:1]
        outbase = os.path.basename(infile)
        if outbase.endswith((".stl", ".STL")):
            outbase = outbase[:-4]
        outfile = outbase+".ps"
    else:
        outfile = args[1]
        del args[:2]
    tr = xform.Xform()
    while len(args) > 1:
        if not args[0] in validargs:
            print "Unknown argument '{}' ignored.".format(args[0])
            del args[0]
            continue
        try:
            ang = float(args[1])
            if args[0] in ['x','X']:
                tr.rotx(ang)
            elif args[0] in ['y','Y']:
                tr.roty(ang)
            else:
                tr.rotz(ang)
            del args[:2]
        except:
            print "Argument '{}' is not a number, ignored.".format(args[1])
            continue
    return (infile, outfile, tr)


def main(args):
    """Main program.

    Keyword arguments:
    argv -- command line arguments (without program name!)
    """
    infile, outfile, tr = getargs(args)
    try:
        ifacets, points, _ = stl.readstl(infile)
        inormals, vectors = stl.normals(ifacets, points)
    except ValueError as e:
        print infile + ':', e
        sys.exit(1)
    # Apply transformations
    points  = [tr.applyto(p) for p in points]
    vectors  = [tr.applyrot(v) for v in vectors]
    # Calculate viewport and transformation
    minx, maxx, miny, maxy, minz, maxz = bbox.makebb(points)
    pr = xform.Zpar(minx, maxx, miny, maxy)
    # Calculate the visible facets
    vf = [(f, n) for f, n in zip(ifacets, inormals) 
          if pr.isvisible(vectors[n])]
    # Postscript preamble.
    s1 = "% The scale factor used is: {} PostScript points/STL-unit"
    s2 = "% This becomes a picture of {:.0f}×{:.0f} PostScript points;"\
         " {:.0f}×{:.0f} mm."
    cs = "%   {} ≤ {} ≤ {}"
    lines = ["%!PS-Adobe-1.0", 
            "%%BoundingBox: 0 0 {:.0f} {:.0f}".format(pr.w, pr.h),
            "% Generated by {}\n% on {}.".format(ver, time.asctime()),
            "% Bounding box (STL units)",
            cs.format(minx, 'x', maxx), cs.format(miny, 'y', maxy),
            cs.format(minz, 'z', maxz),
            s1.format(pr.s), 
            s2.format(pr.w, pr.h, pr.w/72*25.4, pr.h/72*25.4),
            "% {} of {} facets are visible.".format(len(vf), len(ifacets))
            ] 
    # Next, depth-sort the facets using the largest z-value of the
    # three vertices.
    def fkey(t):
        (a, b, c), _ = t
        return max(points[a][2], points[b][2], points[c][2])
    vf.sort(None, fkey)
    # PostScript settings and macros.
    lines += [".5 setlinewidth", ".5 setlinewidth", "/g {setgray} def",
              "/f {moveto} def", "/s {lineto} def", 
              "/t {lineto closepath gsave fill grestore stroke} def"]
    # Project the points and calculate the intensity of the facets colors.
    ppoints = [pr.applyto(p) for p in points]
    intensity = [0.4*v[2]+0.5 for v in vectors]
    # Draw the triangles.
    s3 = "{:4.2f} g {:.3f} {:.3f} f {:.3f} {:.3f} s {:.3f} {:.3f} t"
    lines += [s3.format(intensity[ni], ppoints[a][0], ppoints[a][1], 
                        ppoints[b][0], ppoints[b][1], 
                        ppoints[c][0], ppoints[c][1]) 
              for (a, b, c), ni in vf]
    # Showpage must be the last line in the PostScript output.
    lines += ["showpage", '%%EOF']
    # Send output.
    outs = '\n'.join(lines)
    try:
        with open(outfile, "w+") as outf:
            outf.write(outs)
    except:
        print "Cannot write output file '{}'".format(args[2])
        sys.exit(2)


if __name__ == '__main__':
    main(sys.argv[1:])
