#! /usr/bin/env python
# -*- python coding: utf-8 -*-
# Program for converting an STL file into a POV-ray mesh
#
# Copyright © 2011 R.F. Smith <rsmith@xs4all.nl>. All rights reserved.
# Time-stamp: <2011-10-12 20:18:30 rsmith>
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

import sys
import string
import time

import stl


ver = "stl2pov [rev. VERSION] (DATE)"

def usage():
    print ver
    print "Usage: stl2pov infile [outfile]"


# This is the main program
if len(sys.argv) == 1:
    usage()
    sys.exit(0)
try:
    stlobj = stl.Object(sys.argv[1])
except:
    print "Error: cannot process input file '{}'.".format(sys.argv[1])
    print sys.exc_info()[0]
    usage()
    sys.exit(1)
# Remove spaces from name
stlobj.name = stlobj.name.strip()
stlobj.name = stlobj.name.translate(string.maketrans(string.whitespace,
                                           "_"*len(string.whitespace)))
# Prepare output string.
outs = "// Name of solid: {}\n".format(stlobj.name)
outs += "// {} facets\n".format(len(stlobj))
outs += "// Generated by {} on {}.\n".format(ver, time.asctime())
outs += "// Extents of the mesh:\n"
xmin, xmax, ymin, ymax, zmin, zmax = stlobj.extents()
# POV-Ray uses a left-handed cartesian coordinate system, whereas the STL file
# format assumes a right-handed one. So print in sequence y,x,z instead of
# x,y,z to account for the coordinate system transformation.
outs += "// {} ≤ x ≤ {}\n".format(ymin, ymax)
outs += "// {} ≤ y ≤ {}\n".format(xmin, xmax)
outs += "// {} ≤ z ≤ {}\n".format(zmin, zmax)
(x, y, z) = stlobj.center()
s = "// Center (midpoint of extents):\n// <{1}, {0}, {2}>\n"
outs += s.format(x, y, z)
(x, y, z) = stlobj.meanpoint()
s = "// Mean point (average of all vertices):\n// <{1}, {0}, {2}>\n"
outs += s.format(x, y, z)
outs += "# declare m_{} = mesh {{\n".format(stlobj.name)
sot = "  triangle {{ // {}\n"
fc = "    <{1}, {0}, {2}>,\n"
fct = "    <{1}, {0}, {2}>\n"
for n, f in enumerate(stlobj.facet):
    outs += sot.format(n+1)
    outs += fc.format(f.v[0].x, f.v[0].y, f.v[0].z)
    outs += fc.format(f.v[1].x, f.v[1].y, f.v[1].z)
    outs += fct.format(f.v[2].x, f.v[2].y, f.v[2].z)
    outs += "  }\n"
outs += "}\n"
# Send output.
if len(sys.argv) < 3:
    # To standard output.
    print outs
    sys.exit(0)
# Or to a named output file.
try:
    outf = open(sys.argv[2], "w+")
    outf.write(outs)
    outf.close()
except:
    print "Cannot write output file '{}'".format(sys.argv[2])
    sys.exit(2)
