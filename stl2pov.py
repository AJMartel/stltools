#! /usr/bin/env python
# -*- python coding: utf-8 -*-
# Copyright Â© 2012 R.F. Smith <rsmith@xs4all.nl>. All rights reserved.
# $Date$
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# THIS SOFTWARE IS PROVIDED BY AUTHOR AND CONTRIBUTORS ``AS IS'' AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL AUTHOR OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
# OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
# SUCH DAMAGE.

"""Program for converting an STL file into a POV-ray mesh or mesh2."""

import argparse
import sys
import os
import time
from brep import stlfile
from brep import stlobject

ver = ('stl2pov [ver. ' + '$Revision$'[11:-2] + 
       '] ('+'$Date$'[7:17]+')')


def mesh1(rs):
    """Returns a string containing rf as a POV-ray mesh object.
    
    Argument:
    rs -- a stlobject.RawStl instance
    """
    ms = "# declare m_{} = mesh {{\n".format(rs.name.replace(' ', '_'))
    sot = "  triangle {\n"
    fc = "    <{1}, {0}, {2}>{3}\n"
    for (a, b, c), _ in rs.facets:
        ms += sot
        ms += fc.format(a.x, a.y, a.z, '')
        ms += fc.format(b.x, b.y, b.z, '')
        ms += fc.format(c.x, c.y, c.z, ',')
        ms += "  }\n"
    ms += "}\n"
    return ms

def mesh2(ns):
    """Returns a string containing ns as a POV-ray mesh2 object.
    
    Argument:
    ns -- a stlobject.IndexedStl instance
    """
    ms = "# declare m_{} = mesh2 {{\n".format(ns.name)
    ms += '  vertex_vectors {\n'
    ms += '    {},\n'.format(len(ns.numvertices))
    for p in ns.vertices:
        ms += '    <{1}, {0}, {2}>,\n'.format(p.x, p.y, p.z)
    ms = ms[:-2]
    ms += '\n  }\n'
    ms += '  face_indices {\n'
    ms += '    {},\n'.format(len(ns.numfacets))
    for (a, b, c), _ in ns.facets:  #pylint: disable=W0612
        ms += '    <{}, {}, {}>,\n'.format(a, b, c)
    ms = ms[:-2]
    ms += '\n  }\n}\n'
    return ms


def main(argv):
    """Main program.

    Keyword arguments:
    argv -- command line arguments (without program name!)
    """
    parser = argparse.ArgumentParser(description=__doc__)
    argtxt = 'generate a mesh2 object (slow on big files)'
    parser.add_argument('-2,' '--mesh2', action='store_true', 
                        help=argtxt, dest='mesh2')
    parser.add_argument('file', nargs='*', help='one or more file names')
    args = parser.parse_args(argv)
    if not args.file:
        parser.print_help()
        sys.exit(0)
    for fn in args.file:
        root, ext = os.path.splitext(fn)  #pylint: disable=W0612
        outfn = os.path.basename(root) + '.inc'
        try:
            rf = stlfile.StlReader(fn)
        except ValueError as e:
            print fn + ':', e
        raw = stlobject.RawStl(rf.name)
        fcts = rf.readall()
        raw.addfacets(fcts)
        outs = "// Generated by {}\n// on {}.\n".format(ver, time.asctime())
        outs += "// Source file name: '{}'\n".format(fn)
        if args.mesh2:
            ind = stlobject.IndexedStl.fromraw(raw)
            outs += ind.bbox().stats('// ') + '\n'
            outs += mesh2(ind)
        else:
            outs += raw.bbox().stats('// ') + '\n'
            outs += mesh1(raw)
        try:
            with open(outfn, 'w+') as of:
                of.write(outs)
        except:
            print "Cannot write output file '{}'".format(outfn)
            sys.exit(2)


if __name__ == '__main__':
    main(sys.argv[1:])
